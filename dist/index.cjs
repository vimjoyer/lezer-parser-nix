'use strict';

var lr = require('@lezer/lr');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const StringContent = 1,
  stringInterpolationStart = 90,
  StringEnd = 2,
  IndentedStringContent = 3,
  indentedStringInterpolationStart = 91,
  IndentedStringEnd = 4;

/* Hand-written tokenizers for Nix tokens that can't be
   expressed by lezer's built-in tokenizer. */


const braceL = 123, dollar = 36, backslash = 92,
  doublequote = 34, singlequote = 39, newline = 10;

// based on javascript template parser
// https://github.com/lezer-parser/javascript/blob/main/src/tokens.js
const indentedString = new lr.ExternalTokenizer(input => {
  for (let afterDollar = false, i = 0;; i++) {
    let {next} = input;
    if (next < 0) { // next == -1: end of file
      if (i) {
        input.acceptToken(IndentedStringContent);
      }
      break
    } else if (next == singlequote) {
      if (input.peek(1) == singlequote) {
        if (i == 0) {
          // end of string
          input.advance(2);
          input.acceptToken(IndentedStringEnd);
          break
        }
        if (input.peek(2) == dollar && input.peek(3) == braceL) {
          input.advance(2);
        }
        else {
          input.acceptToken(IndentedStringContent);
          // do not advance. '' is needed for indentedStringEnd token
          break
        }
      }
    } else if (next == braceL && afterDollar) {
      if (i == 1) {
        input.acceptToken(indentedStringInterpolationStart, 1);
      }
      else {
        input.acceptToken(IndentedStringContent, -1);
      }
      break
    } else if (next == newline && i > 0) {
      // Break up indentedString strings on lines, to avoid huge tokens
      input.advance(); // add newline to current token
      input.acceptToken(IndentedStringContent);
      break
    }
    afterDollar = next == dollar;
    input.advance();
  }
});

// based on javascript template parser
// https://github.com/lezer-parser/javascript/blob/main/src/tokens.js
const string = new lr.ExternalTokenizer(input => {
  for (let afterDollar = false, i = 0;; i++) {
    let {next} = input;
    if (next < 0) {
      if (i) input.acceptToken(StringContent);
      break
    } else if (next == doublequote) {
      if (i) input.acceptToken(StringContent);
      else input.acceptToken(StringEnd, 1);
      break
    } else if (next == braceL && afterDollar) {
      if (i == 1) input.acceptToken(stringInterpolationStart, 1);
      else input.acceptToken(StringContent, -1);
      break
    } else if (next == newline && i) {
      // Break up template strings on lines, to avoid huge tokens
      input.advance();
      input.acceptToken(StringContent);
      break
    } else if (next == backslash) {
      input.advance();
    }
    afterDollar = next == dollar;
    input.advance();
  }
});

const nixHighlighting = highlight.styleTags({
    Identifier: highlight.tags.propertyName,
    TRUE: highlight.tags.bool,
    WITH: highlight.tags.bool,
    MarkCurlyOpen: highlight.tags.integer,

    ASSERT: highlight.tags.keyword,
    IF: highlight.tags.keyword,
    THEN: highlight.tags.keyword,
    ELSE: highlight.tags.keyword,
    WITH: highlight.tags.keyword,
    LET: highlight.tags.keyword,
    IN: highlight.tags.keyword,
    OR_KW: highlight.tags.keyword,
    INHERIT: highlight.tags.keyword,
    REC: highlight.tags.keyword,
    AttrInterpolation: highlight.tags.keyword,
    float: highlight.tags.keyword,
    Float: highlight.tags.keyword,
    Parens: highlight.tags.keyword,
    FormalsRest: highlight.tags.keyword,
    
    PathAbsolute: highlight.tags.link,
    PathHome: highlight.tags.link,
    PathLibrary: highlight.tags.link,
    PathRelative: highlight.tags.link,
    PathRaw: highlight.tags.link,
    PathContent: highlight.tags.link,
    PathComponent: highlight.tags.link,
    uriPath: highlight.tags.link,
    uriSchema: highlight.tags.link,
    StringStart: highlight.tags.string,
    StringEnd: highlight.tags.string,

    FALSE: highlight.tags.bool,
    StringContent: highlight.tags.string,
    IndentedString: highlight.tags.string,
    IndentedStringContent: highlight.tags.string,
    Comment: highlight.tags.lineComment,
    CommentBlock: highlight.tags.blockComment,
    Float: highlight.tags.float,
    Integer: highlight.tags.integer,
    NULL: highlight.tags.null,
    URI: highlight.tags.url,
    Path: highlight.tags.literal,
    "( )": highlight.tags.paren,
    "{ }": highlight.tags.brace,
    "[ ]": highlight.tags.squareBracket,
    "if then else": highlight.tags.controlKeyword,
    "import with let in rec builtins inherit assert or": highlight.tags.keyword,
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Identifier = {__proto__:null,assert:206, with:210, let:212, inherit:230, in:238, if:242, then:244, else:246, __curPos:290, __typeOf:294, __isFunction:296, __isInt:298, __isFloat:300, __isString:302, __isBool:304, __isPath:306, __genericClosure:308, __addErrorContext:310, __ceil:312, __floor:314, __tryEval:316, __getEnv:318, __seq:320, __deepSeq:322, __trace:324, __toPath:326, __storePath:328, __pathExists:330, __readFile:332, __findFile:334, __hashFile:336, __readDir:338, __toXML:340, __toJSON:342, __fromJSON:344, __toFile:346, __filterSource:348, __path:350, __attrNames:352, __attrValues:354, __getAttr:356, __unsafeGetAttrPos:358, __hasAttr:360, __isAttrs:362, __listToAttrs:364, __intersectAttrs:366, __catAttrs:368, __functionArgs:370, __mapAttrs:372, __zipAttrsWith:374, __isList:376, __elemAt:378, __head:380, __tail:382, __filter:384, __elem:386, __concatLists:388, __length:390, "__foldl'":392, __any:394, __all:396, __genList:398, __sort:400, __partition:402, __groupBy:404, __concatMap:406, __add:408, __sub:410, __mul:412, __div:414, __bitAnd:416, __bitOr:418, __bitXor:420, __lessThan:422, __substring:424, __stringLength:426, __hashString:428, __match:430, __split:432, __concatStringsSep:434, __replaceStrings:436, __parseDrvName:438, __compareVersions:440, __splitVersion:442, __traceVerbose:444, true:448, false:450, null:452, rec:460, or:466};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "MfQ]QSOOO/UQWO'#DlO]QSO'#CmO]QSO'#CoO/rOPO'#EnO]QSO'#C}O/}QSO'#DRO/}QSO'#DSO7aQWO'#ExOOQO'#F_'#F_OOQO'#Dm'#DmOOQO'#Dn'#DnOOQO'#Dp'#DpO7wOQO'#HXOOQO'#Du'#DuOOQO'#Dw'#DwO]QSO'#DyO>[QSO'#D}OOQO'#Fb'#FbOOQO'#Fa'#FaOEmQWO'#FaOFWQWO'#E|OOQO'#F`'#F`OOQO'#E|'#E|OOQO'#Ex'#ExOOQO'#E^'#E^QOQSOOOGpQ`O'#D|OOQO'#Cn'#CnOOQO'#Cp'#CpOOQO'#Cr'#CrOH[QSO'#CqOOQO'#DO'#DOOOQO'#Dk'#DkOOQO'#Fd'#FdOOQO'#Dq'#DqOOQO'#Dr'#DrOOQO'#Ds'#DsOOQO'#D{'#D{OHpQSO'#DzOOQO'#Dt'#DtO]QSO,59OOHuQSO,59WOHzQSO,59XOIPQSO,59ZO]QSO'#CvOOOP'#ES'#ESOIUOPO,5;YOOQO,5;Y,5;YOIaQSO,59iOJWQWO,59mOOQO'#Dl'#DlOKQQSO'#D|OOQO,59n,59nO/}QSO,59oO/}QSO,59pO/}QSO,59qO/}QSO,59rO/}QSO,59sO/}QSO,59tO/}QSO,59uO/}QSO,59vO/}QSO,59wO/}QSO,59xO/}QSO,59zO/}QSO,59{O/}QSO,59|O/}QSO,59}O/}QSO,5:OOKcQSO,59yOKnQSO'#DvOOOQ'#EV'#EVO!$YOQO,5=sOOQO,5=s,5=sO!$eQSO,5:eOOQO,5:i,5:iO!$jQSO,5:iO!*yQSO'#FaOKcQSO,5:UOOQO,5:T,5:TO!+TQSO'#ChOOQO'#Ea'#EaO!+fQ`O'#EQO!+nQSO'#CgOOQO'#Cj'#CjO!+nQSO'#CgOOQO'#Cg'#CgO!+vQSO'#CwOOQO'#Em'#EmO!8sQSO'#ElOOQO'#ER'#ERO!9QQSO'#EkO!9fQSO,59QO!9kQSO'#CsOOQO'#Cy'#CyO!9pQSO'#CxO!:RQSO,5:hOOQO'#Ct'#CtO!:WQSO,59]OKQQSO,59hOKQQSO,5:fOOQO1G.j1G.jO!:]Q`O1G.rO]QSO1G.sO]QSO1G.uO!:kQWO,59bOOOP-E8Q-E8QOOQO1G0t1G0tO]QSO1G/TOOQO'#DP'#DPO!;eQWO1G/ZO!<[QWO1G/[O!=pQWO1G/]O!?[QWO1G/^O!@vQWO1G/_O!BbQWO1G/`O!C_QWO1G/aO!DUQWO1G/bO!D{QWO1G/cO!FQQWO1G/dO!GrQWO1G/fOOQO1G/g1G/gO!IdQWO1G/hO!KOQWO1G/iO!LjQWO1G/jO!MZQWO'#ElOOQO1G/e1G/eO!NpQpO'#DlO#!RQpO'#ExO#!YQpO,5:bO#!_QpO'#FaO#!iQpO'#E|OOOQ-E8T-E8TOOQO1G3_1G3_OOQO1G0P1G0POOQO'#EW'#EWO##rQSO1G0TOOQO1G0T1G0TO#+WQWO1G/pO!+vQSO,59TO#+nQSO'#ETO#2[QSO,5;WO#2iQSO'#ChOOQO,5:l,5:lOOQO,59R,59RO!+fQ`O,59ROOQO-E8O-E8OO#2tQSO,59RO#2|Q!bO'#DlO#3^QSO,59cO#4gQ`O'#ExO#4qQ!bO'#FaO#5OQ!bO'#E|OOQO-E8P-E8PO#6[QSO1G.lO]QSO,59_O#6dQSO'#EtO#6rQSO,59dO]QSO,59fOOQO'#EU'#EUOOQO1G0S1G0SOOQO'#C{'#C{O]QSO1G.wO#6wQSO1G/SO#6|QSO1G0QO#7RQSO7+$^OOQO7+$_7+$_OOQO7+$a7+$aOOOP1G.|1G.|O#7WQSO7+$oO#7]QWO,5;WO#8rQpO,59mOOOQ1G/|1G/|OOQO-E8U-E8UOOQO7+%o7+%oO#?hQSO1G/pOOQO'#EP'#EPO8SQSO7+%pOOQO1G.o1G.oOOQO,5:o,5:oOOQO-E8R-E8ROOQO1G.m1G.mP#?oQSO'#EQO!+fQ`O1G.mOOQO1G.}1G.}O#?tQ`O,59mO]QSO7+$WO#@bQSO7+$]O#@gQSO1G.yOOQO-E8S-E8SOOQO1G/O1G/OO#@lQSO1G/QOOQO7+$c7+$cOOQO7+$n7+$nOOQO7+%l7+%lO#@qQSO<<GxO]QSO<<HZOOQO'#DQ'#DQO#AkQpO1G/ZO#BRQpO1G/[O#BiQpO1G/]O#CVQpO1G/^O#CsQpO1G/_O#DaQpO1G/`O#D}QpO1G/aO#EeQpO1G/bO#E{QpO1G/cO#FSQpO1G/dO#FpQpO1G/fO#GWQpO1G/hO#GhQpO1G/iO#GxQpO1G/jO$ jQpO'#ElO$ qQpO1G/pOOQO<<I[<<I[OOQO7+$X7+$XO$!mQ`O1G/ZO$#WQ`O1G/[O$#qQ`O1G/]O$$bQ`O1G/^O$%RQ`O1G/_O$%rQ`O1G/`O$&cQ`O1G/aO$&|Q`O1G/bO$'gQ`O1G/cO$'qQ`O1G/dO$(bQ`O1G/fO$({Q`O1G/hO$)`Q`O1G/iO$)sQ`O1G/jO$*WQ!bO'#ElO$*bQ!bO1G/pOOQO<<Gr<<GrO$*lQSO<<GwOOQO7+$e7+$eO$*qQSO7+$lO]QSOAN=dOOQOAN=uAN=uO$2aQpO,5;WO$2hQ!bO,5;WO]QSOAN=cO$2rQSO<<HWOOQOG23OG23OOOQOG22}G22}OOQOAN=rAN=rO$2wQSO'#DRO$3RQSO'#DRO$2wQSO'#DSO$3RQSO'#DSOKnQSO,59OO!+vQSO,59OO$2wQSO,59oO$3RQSO,59oO$2wQSO,59pO$3RQSO,59pO$2wQSO,59qO$3RQSO,59qO$2wQSO,59rO$3RQSO,59rO$2wQSO,59sO$3RQSO,59sO$2wQSO,59tO$3RQSO,59tO$2wQSO,59uO$3RQSO,59uO$2wQSO,59vO$3RQSO,59vO$2wQSO,59wO$3RQSO,59wO$2wQSO,59xO$3RQSO,59xO$2wQSO,59zO$3RQSO,59zO$2wQSO,59{O$3RQSO,59{O$2wQSO,59|O$3RQSO,59|O$2wQSO,59}O$3RQSO,59}O$2wQSO,5:OO$3RQSO,5:OO$3]QSO,59yO$3hQSO,59yO$3sQSO,5:UO$3hQSO,5:UO$3]QSO,5:UOKnQSO1G.sO!+vQSO1G.sOKnQSO1G.uO!+vQSO1G.uOKnQSO1G.wO!+vQSO1G.wO8SQSO7+%pO8SQSO7+%pO8SQSO7+%pOKnQSO7+$WO!+vQSO7+$WOKnQSO<<HZO!+vQSO<<HZOKnQSOAN=dO!+vQSOAN=dOKnQSOAN=cO!+vQSOAN=cO$4OQSO,59XO$4TQSO,59XO$4YQSO,59ZO$4_QSO,59ZO!:WQSO,59]O!:WQSO,59]O$4dQSO1G.lO$4lQSO1G.lO#7WQSO7+$oO#7WQSO7+$oO$4tQSO<<GxO$4yQSO<<GxO$5OQSO<<GwO$5TQSO<<GwO]QSO'#CmO]QSO'#CmO]QSO'#CoO]QSO'#CoOH[QSO'#CqOH[QSO'#CqO$5YQSO,59QO$5_QSO,59QO]QSO1G/TO]QSO1G/TO$5dQSO7+$^O$5iQSO7+$^O$5nQSO7+$]O$5sQSO7+$]OGpQ`O'#D|OGpQ`O'#D|OIaQSO,59iOIaQSO,59iO!:]Q`O1G.rO!:]Q`O1G.rO]QSO'#C}O]QSO'#C}O$5xQSO,59WO$5}QSO,59W",
  stateData: "$6c~O#POSTOSUOS~OXPOiSO!XXO!YXO!ZXO![XO!cZO!l_O#SkO#ZlO#]mO#^nO#i`O#mpO#qUO#rVO$VqO$XrO$YrO$ZrO$[rO$]rO$^rO$_rO$`rO$arO$brO$crO$drO$erO$frO$grO$hrO$irO$jrO$krO$lrO$mrO$nrO$orO$prO$qrO$rrO$srO$trO$urO$vrO$wrO$xrO$yrO$zrO${rO$|rO$}rO%OrO%PrO%QrO%RrO%SrO%TrO%UrO%VrO%WrO%XrO%YrO%ZrO%[rO%]rO%^rO%_rO%`rO%arO%brO%crO%drO%erO%frO%grO%hrO%irO%jrO%krO%lrO%mrO%nrO%orO%prO%qrO%rrO%srO%trO%urO%vrO%w[O%xsO%ytO%zuO%|]O&OvO&PaO~OX!`Xi!`X!X!`X!Y!`X!Z!`X![!`X!c!`X!l!`X#S!`X#U!`X#e!`X#i!`X#r!`X#s!`X#t!`X#u!`X#v!`X#w!`X#x!`X#y!`X#z!`X#{!`X#|!`X#}!`X$O!`X$P!`X$Q!`X$V!`X$X!`X$Y!`X$Z!`X$[!`X$]!`X$^!`X$_!`X$`!`X$a!`X$b!`X$c!`X$d!`X$e!`X$f!`X$g!`X$h!`X$i!`X$j!`X$k!`X$l!`X$m!`X$n!`X$o!`X$p!`X$q!`X$r!`X$s!`X$t!`X$u!`X$v!`X$w!`X$x!`X$y!`X$z!`X${!`X$|!`X$}!`X%O!`X%P!`X%Q!`X%R!`X%S!`X%T!`X%U!`X%V!`X%W!`X%X!`X%Y!`X%Z!`X%[!`X%]!`X%^!`X%_!`X%`!`X%a!`X%b!`X%c!`X%d!`X%e!`X%f!`X%g!`X%h!`X%i!`X%j!`X%k!`X%l!`X%m!`X%n!`X%o!`X%p!`X%q!`X%r!`X%s!`X%t!`X%u!`X%v!`X%w!`X%x!`X%y!`X%z!`X%|!`X&O!`X&P!`X~O#RyO#YzO!{!`X#[!`X#n!`X#j!`X#c!`X#o!`X~P'wOP!OOQ!QO!|}O~OX!TOiSO!XXO!YXO!ZXO![XO!cZO!l_O#S!UO#i`O#qUO#rVO$VqO$XrO$YrO$ZrO$[rO$]rO$^rO$_rO$`rO$arO$brO$crO$drO$erO$frO$grO$hrO$irO$jrO$krO$lrO$mrO$nrO$orO$prO$qrO$rrO$srO$trO$urO$vrO$wrO$xrO$yrO$zrO${rO$|rO$}rO%OrO%PrO%QrO%RrO%SrO%TrO%UrO%VrO%WrO%XrO%YrO%ZrO%[rO%]rO%^rO%_rO%`rO%arO%brO%crO%drO%erO%frO%grO%hrO%irO%jrO%krO%lrO%mrO%nrO%orO%prO%qrO%rrO%srO%trO%urO%vrO%w[O%xsO%ytO%zuO%|]O&OvO&PaO~O#U!gO#r!cO#s!WO#t!XO#u!YO#v!ZO#w![O#x!]O#y!^O#z!_O#{!`O#|!aO#}!bO$O!dO$P!eO$Q!fO~O!{#lX#[#lX#n#lX#j#lX#c#lX#o#lX~P6]OR!iOS!kO!}!hO~OX!TOiSO!XXO!YXO!ZXO![XO!cZO!l_O#S!UO#i`O$VqO$XrO$YrO$ZrO$[rO$]rO$^rO$_rO$`rO$arO$brO$crO$drO$erO$frO$grO$hrO$irO$jrO$krO$lrO$mrO$nrO$orO$prO$qrO$rrO$srO$trO$urO$vrO$wrO$xrO$yrO$zrO${rO$|rO$}rO%OrO%PrO%QrO%RrO%SrO%TrO%UrO%VrO%WrO%XrO%YrO%ZrO%[rO%]rO%^rO%_rO%`rO%arO%brO%crO%drO%erO%frO%grO%hrO%irO%jrO%krO%lrO%mrO%nrO%orO%prO%qrO%rrO%srO%trO%urO%vrO%w[O%xsO%ytO%zuO%|]O&OvO&PaO~O&Q!mO~P8SOX$TXi$TX!X$TX!Y$TX!Z$TX![$TX!c$TX!l$TX#S$TX#U$TX#i$TX#r$TX#s$TX#t$TX#u$TX#v$TX#w$TX#x$TX#y$TX#z$TX#{$TX#|$TX#}$TX$O$TX$P$TX$Q$TX$V$TX$X$TX$Y$TX$Z$TX$[$TX$]$TX$^$TX$_$TX$`$TX$a$TX$b$TX$c$TX$d$TX$e$TX$f$TX$g$TX$h$TX$i$TX$j$TX$k$TX$l$TX$m$TX$n$TX$o$TX$p$TX$q$TX$r$TX$s$TX$t$TX$u$TX$v$TX$w$TX$x$TX$y$TX$z$TX${$TX$|$TX$}$TX%O$TX%P$TX%Q$TX%R$TX%S$TX%T$TX%U$TX%V$TX%W$TX%X$TX%Y$TX%Z$TX%[$TX%]$TX%^$TX%_$TX%`$TX%a$TX%b$TX%c$TX%d$TX%e$TX%f$TX%g$TX%h$TX%i$TX%j$TX%k$TX%l$TX%m$TX%n$TX%o$TX%p$TX%q$TX%r$TX%s$TX%t$TX%u$TX%v$TX%w$TX%x$TX%y$TX%z$TX%|$TX&O$TX&P$TX~O#e!pO!{$TX#[$TX#n$TX#j$TX#c$TX#o$TX~P>cO!{#pX#U#pX#r#pX#s#pX#t#pX#u#pX#v#pX#w#pX#x#pX#y#pX#z#pX#{#pX#|#pX#}#pX$O#pX$P#pX$Q#pX#[#pX#n#pX#j#pX#c#pX#o#pX~P8SOX!rOiSO#V!tO#W!vO#d!yO#g#QO#XZP#X#_P~OX!{OiSO#S#VO#d!yO#g#QO#k#_P~O#S#WO~O#S#YO~O#[#ZO~O#[#[O~OP!OOQ#_O!|}O~O#n#aO~O#sua#tua#uua#vua#wua#xua#yua#zua#{ua#|ua~O#U!gO#r!cO#}!bO$O!dO$P!eO$Q!fO!{ua#[ua#nua#jua#cua#oua~PIfOX!{OiSO#d!yO#g#QO#X#_P~OX#qOiSO#d!yO~OX#sOiSO!XXO!YXO!ZXO![XO!cZO!l_O#S(XO#ZlO#]mO#^nO#i`O#mpO#q&_O#r&aO$VqO$XrO$YrO$ZrO$[rO$]rO$^rO$_rO$`rO$arO$brO$crO$drO$erO$frO$grO$hrO$irO$jrO$krO$lrO$mrO$nrO$orO$prO$qrO$rrO$srO$trO$urO$vrO$wrO$xrO$yrO$zrO${rO$|rO$}rO%OrO%PrO%QrO%RrO%SrO%TrO%UrO%VrO%WrO%XrO%YrO%ZrO%[rO%]rO%^rO%_rO%`rO%arO%brO%crO%drO%erO%frO%grO%hrO%irO%jrO%krO%lrO%mrO%nrO%orO%prO%qrO%rrO%srO%trO%urO%vrO%w[O%xsO%ytO%zuO%|]O&OvO&PaO~OR!iOS#yO!}!hO~O#j#zO~O&Q#}O~P8SOX$TXi$TX!X$TX!Y$TX!Z$TX![$TX!c$TX!l$TX#S$TX#i$TX$V$TX$X$TX$Y$TX$Z$TX$[$TX$]$TX$^$TX$_$TX$`$TX$a$TX$b$TX$c$TX$d$TX$e$TX$f$TX$g$TX$h$TX$i$TX$j$TX$k$TX$l$TX$m$TX$n$TX$o$TX$p$TX$q$TX$r$TX$s$TX$t$TX$u$TX$v$TX$w$TX$x$TX$y$TX$z$TX${$TX$|$TX$}$TX%O$TX%P$TX%Q$TX%R$TX%S$TX%T$TX%U$TX%V$TX%W$TX%X$TX%Y$TX%Z$TX%[$TX%]$TX%^$TX%_$TX%`$TX%a$TX%b$TX%c$TX%d$TX%e$TX%f$TX%g$TX%h$TX%i$TX%j$TX%k$TX%l$TX%m$TX%n$TX%o$TX%p$TX%q$TX%r$TX%s$TX%t$TX%u$TX%v$TX%w$TX%x$TX%y$TX%z$TX%|$TX&O$TX&P$TX~O#e'VO&Q$TX~P!$qO#U$PO#e$QO#V[X#X[X#f#`X~OX$SO#W!vO~O#V$VO#XZX~OX$YOiSO!XXO!YXO!ZXO![XO!cZO!l_O#S(YO#ZlO#]mO#^nO#i`O#mpO#q&`O#r&bO$VqO$XrO$YrO$ZrO$[rO$]rO$^rO$_rO$`rO$arO$brO$crO$drO$erO$frO$grO$hrO$irO$jrO$krO$lrO$mrO$nrO$orO$prO$qrO$rrO$srO$trO$urO$vrO$wrO$xrO$yrO$zrO${rO$|rO$}rO%OrO%PrO%QrO%RrO%SrO%TrO%UrO%VrO%WrO%XrO%YrO%ZrO%[rO%]rO%^rO%_rO%`rO%arO%brO%crO%drO%erO%frO%grO%hrO%irO%jrO%krO%lrO%mrO%nrO%orO%prO%qrO%rrO%srO%trO%urO%vrO%w[O%xsO%ytO%zuO%|]O&OvO&PaO~O#e$QOX#`Xi#`X#[#`X!X#`X!Y#`X!Z#`X![#`X!c#`X!l#`X#S#`X#i#`X$V#`X$X#`X$Y#`X$Z#`X$[#`X$]#`X$^#`X$_#`X$`#`X$a#`X$b#`X$c#`X$d#`X$e#`X$f#`X$g#`X$h#`X$i#`X$j#`X$k#`X$l#`X$m#`X$n#`X$o#`X$p#`X$q#`X$r#`X$s#`X$t#`X$u#`X$v#`X$w#`X$x#`X$y#`X$z#`X${#`X$|#`X$}#`X%O#`X%P#`X%Q#`X%R#`X%S#`X%T#`X%U#`X%V#`X%W#`X%X#`X%Y#`X%Z#`X%[#`X%]#`X%^#`X%_#`X%`#`X%a#`X%b#`X%c#`X%d#`X%e#`X%f#`X%g#`X%h#`X%i#`X%j#`X%k#`X%l#`X%m#`X%n#`X%o#`X%p#`X%q#`X%r#`X%s#`X%t#`X%u#`X%v#`X%w#`X%x#`X%y#`X%z#`X%|#`X&O#`X&P#`X&R#`X~O#f#`X#d#`X&Q#`X~P!2bOX!{OiSO#d!yO#g#QO#X#_X#k#_X~O#X$`O~O#f$aO~OX!{OiSO#d!yO#i$dO#[#hP~O#X$fO~O#k$gO~OX$SO#V!tO#W!vO#XZP~O#c$nO~O#U!gO#r!cO#u!YO#v!ZO#w![O#x!]O#|!aO#}!bO$O!dO$P!eO$Q!fO~O!{wi#swi#twi#ywi#zwi#{wi#[wi#nwi#jwi#cwi#owi~P!:pO!{xi#sxi#txi#yxi#zxi#{xi#[xi#nxi#jxi#cxi#oxi~P!:pO#syi#tyi#uyi#vyi#wyi#xyi#yyi#zyi#{yi~O#U!gO#r!cO#|!aO#}!bO$O!dO$P!eO$Q!fO!{yi#[yi#nyi#jyi#cyi#oyi~P!=RO#szi#tzi#uzi#vzi#wzi#xzi#yzi#zzi#{zi~O#U!gO#r!cO#|!aO#}!bO$O!dO$P!eO$Q!fO!{zi#[zi#nzi#jzi#czi#ozi~P!>mO#s{i#t{i#u{i#v{i#w{i#x{i#y{i#z{i#{{i~O#U!gO#r!cO#|!aO#}!bO$O!dO$P!eO$Q!fO!{{i#[{i#n{i#j{i#c{i#o{i~P!@XO#s|i#t|i#u|i#v|i#w|i#x|i#y|i#z|i#{|i~O#U!gO#r!cO#|!aO#}!bO$O!dO$P!eO$Q!fO!{|i#[|i#n|i#j|i#c|i#o|i~P!AsO#s!WO#t!XO!{}i#y}i#z}i#{}i#[}i#n}i#j}i#c}i#o}i~P!:pO#s!WO#t!XO#y!^O!{!Oi#z!Oi#{!Oi#[!Oi#n!Oi#j!Oi#c!Oi#o!Oi~P!:pO!{!Pi#[!Pi#n!Pi#j!Pi#c!Pi#o!Pi~P6]O#s!Qi#t!Qi#u!Qi#v!Qi#w!Qi#x!Qi#y!Qi#z!Qi#{!Qi~O#U!gO#r!cO#|!aO#}!bO$O!dO$P!eO$Q!fO!{!Qi#[!Qi#n!Qi#j!Qi#c!Qi#o!Qi~P!EcO#s!Si#t!Si#u!Si#v!Si#w!Si#x!Si#y!Si#z!Si#{!Si#|!Si#}!Si~O#U!gO#r!cO$O!dO$P!eO$Q!fO!{!Si#[!Si#n!Si#j!Si#c!Si#o!Si~P!F}O#s!Ui#t!Ui#u!Ui#v!Ui#w!Ui#x!Ui#y!Ui#z!Ui#{!Ui#|!Ui#}!Ui$O!Ui$P!Ui~O#U!gO#r!cO$Q!fO!{!Ui#[!Ui#n!Ui#j!Ui#c!Ui#o!Ui~P!HiO#s!Vi#t!Vi#u!Vi#v!Vi#w!Vi#x!Vi#y!Vi#z!Vi#{!Vi#|!Vi#}!Vi$O!Vi$P!Vi~O#U!gO#r!cO$Q!fO!{!Vi#[!Vi#n!Vi#j!Vi#c!Vi#o!Vi~P!JTO#s!Wi#t!Wi#u!Wi#v!Wi#w!Wi#x!Wi#y!Wi#z!Wi#{!Wi#|!Wi#}!Wi$O!Wi$P!Wi~O#U!gO#r!cO$Q!fO!{!Wi#[!Wi#n!Wi#j!Wi#c!Wi#o!Wi~P!KoO!{#`X#U#`X#r#`X#s#`X#t#`X#u#`X#v#`X#w#`X#x#`X#y#`X#z#`X#{#`X#|#`X#}#`X$O#`X$P#`X$Q#`X#n#`X#j#`X#c#`X#o#`X~P!2bO#R&cO#Y(aO%}!`X~P'wO#U'TO#r&{O#s&eO#t&gO#u&iO#v&kO#w&mO#x&oO#y&qO#z&sO#{&uO#|&wO#}&yO$O&}O$P'PO$Q'RO~O%}#lX~P!N}O%}$rO~O#e'XO%}$TX~P>cO#U#pX#r#pX#s#pX#t#pX#u#pX#v#pX#w#pX#x#pX#y#pX#z#pX#{#pX#|#pX#}#pX$O#pX$P#pX$Q#pX%}#pX~P8SO&Q$tO~P8SO&R$vOX!^ii!^i!X!^i!Y!^i!Z!^i![!^i!c!^i!l!^i#S!^i#U!^i#i!^i#r!^i#s!^i#t!^i#u!^i#v!^i#w!^i#x!^i#y!^i#z!^i#{!^i#|!^i#}!^i$O!^i$P!^i$Q!^i$V!^i$X!^i$Y!^i$Z!^i$[!^i$]!^i$^!^i$_!^i$`!^i$a!^i$b!^i$c!^i$d!^i$e!^i$f!^i$g!^i$h!^i$i!^i$j!^i$k!^i$l!^i$m!^i$n!^i$o!^i$p!^i$q!^i$r!^i$s!^i$t!^i$u!^i$v!^i$w!^i$x!^i$y!^i$z!^i${!^i$|!^i$}!^i%O!^i%P!^i%Q!^i%R!^i%S!^i%T!^i%U!^i%V!^i%W!^i%X!^i%Y!^i%Z!^i%[!^i%]!^i%^!^i%_!^i%`!^i%a!^i%b!^i%c!^i%d!^i%e!^i%f!^i%g!^i%h!^i%i!^i%j!^i%k!^i%l!^i%m!^i%n!^i%o!^i%p!^i%q!^i%r!^i%s!^i%t!^i%u!^i%v!^i%w!^i%x!^i%y!^i%z!^i%|!^i&O!^i&P!^i~O!{!^i#[!^i#n!^i#j!^i#c!^i#o!^i~P##yOX$yOiSO#d!yO~O#e$QOX#`ai#`a#[#`a!X#`a!Y#`a!Z#`a![#`a!c#`a!l#`a#S#`a#i#`a$V#`a$X#`a$Y#`a$Z#`a$[#`a$]#`a$^#`a$_#`a$`#`a$a#`a$b#`a$c#`a$d#`a$e#`a$f#`a$g#`a$h#`a$i#`a$j#`a$k#`a$l#`a$m#`a$n#`a$o#`a$p#`a$q#`a$r#`a$s#`a$t#`a$u#`a$v#`a$w#`a$x#`a$y#`a$z#`a${#`a$|#`a$}#`a%O#`a%P#`a%Q#`a%R#`a%S#`a%T#`a%U#`a%V#`a%W#`a%X#`a%Y#`a%Z#`a%[#`a%]#`a%^#`a%_#`a%`#`a%a#`a%b#`a%c#`a%d#`a%e#`a%f#`a%g#`a%h#`a%i#`a%j#`a%k#`a%l#`a%m#`a%n#`a%o#`a%p#`a%q#`a%r#`a%s#`a%t#`a%u#`a%v#`a%w#`a%x#`a%y#`a%z#`a%|#`a&O#`a&P#`a&R#`a~O#f#`a#d#`a&Q#`a~P#+yO#U$PO#V[X#X[X~O#V$}O#XZa~O#R&dO#Y(bO#X!`X#V!`X~P'wO#X%OO~O#U'UO#r&|O#s&fO#t&hO#u&jO#v&lO#w&nO#x&pO#y&rO#z&tO#{&vO#|&xO#}&zO$O'OO$P'QO$Q'SO~O#X#lX#V#lX~P#3cO#e'WO#X$TX#V$TX~P>cO#U#pX#X#pX#r#pX#s#pX#t#pX#u#pX#v#pX#w#pX#x#pX#y#pX#z#pX#{#pX#|#pX#}#pX$O#pX$P#pX$Q#pX#V#pX~P8SO#R%QO#Y%RO~OX!{OiSO#d!yO#[#hX~O#[%UO~O#X%XO~O#X%YO~O#X%ZO~O#o%]O~O!{#`a#U#`a#r#`a#s#`a#t#`a#u#`a#v#`a#w#`a#x#`a#y#`a#z#`a#{#`a#|#`a#}#`a$O#`a$P#`a$Q#`a#n#`a#j#`a#c#`a#o#`a~P#+yO#U'TO#r&{O#}&yO$O&}O$P'PO$Q'RO%}ua~PIfO&R$vOX!^ii!^i!X!^i!Y!^i!Z!^i![!^i!c!^i!l!^i#S!^i#i!^i$V!^i$X!^i$Y!^i$Z!^i$[!^i$]!^i$^!^i$_!^i$`!^i$a!^i$b!^i$c!^i$d!^i$e!^i$f!^i$g!^i$h!^i$i!^i$j!^i$k!^i$l!^i$m!^i$n!^i$o!^i$p!^i$q!^i$r!^i$s!^i$t!^i$u!^i$v!^i$w!^i$x!^i$y!^i$z!^i${!^i$|!^i$}!^i%O!^i%P!^i%Q!^i%R!^i%S!^i%T!^i%U!^i%V!^i%W!^i%X!^i%Y!^i%Z!^i%[!^i%]!^i%^!^i%_!^i%`!^i%a!^i%b!^i%c!^i%d!^i%e!^i%f!^i%g!^i%h!^i%i!^i%j!^i%k!^i%l!^i%m!^i%n!^i%o!^i%p!^i%q!^i%r!^i%s!^i%t!^i%u!^i%v!^i%w!^i%x!^i%y!^i%z!^i%|!^i&O!^i&P!^i~O&Q!^i~P#9]OX$SO~O#U'UO#r&|O#}&zO$O'OO$P'QO$Q'SO#Xua#Vua~PIfOX&RO~O#[&SO~O#j&TO~O#R&UO~O#U'TO#r&{O#u&iO#v&kO#w&mO#x&oO#|&wO#}&yO$O&}O$P'PO$Q'RO~O#swi#twi#ywi#zwi#{wi%}wi~P#@vO#sxi#txi#yxi#zxi#{xi%}xi~P#@vO#U'TO#r&{O#|&wO#}&yO$O&}O$P'PO$Q'RO%}yi~P!=RO#U'TO#r&{O#|&wO#}&yO$O&}O$P'PO$Q'RO%}zi~P!>mO#U'TO#r&{O#|&wO#}&yO$O&}O$P'PO$Q'RO%}{i~P!@XO#U'TO#r&{O#|&wO#}&yO$O&}O$P'PO$Q'RO%}|i~P!AsO#s&eO#t&gO#y}i#z}i#{}i%}}i~P#@vO#s&eO#t&gO#y&qO#z!Oi#{!Oi%}!Oi~P#@vO%}!Pi~P!N}O#U'TO#r&{O#|&wO#}&yO$O&}O$P'PO$Q'RO%}!Qi~P!EcO#U'TO#r&{O$O&}O$P'PO$Q'RO%}!Si~P!F}O#U'TO#r&{O$Q'RO%}!Ui~P!HiO#U'TO#r&{O$Q'RO%}!Vi~P!JTO#U'TO#r&{O$Q'RO%}!Wi~P!KoO#e$QO#U#`X#r#`X#s#`X#t#`X#u#`X#v#`X#w#`X#x#`X#y#`X#z#`X#{#`X#|#`X#}#`X$O#`X$P#`X$Q#`XX#`Xi#`X!X#`X!Y#`X!Z#`X![#`X!c#`X!l#`X#S#`X#i#`X$V#`X$X#`X$Y#`X$Z#`X$[#`X$]#`X$^#`X$_#`X$`#`X$a#`X$b#`X$c#`X$d#`X$e#`X$f#`X$g#`X$h#`X$i#`X$j#`X$k#`X$l#`X$m#`X$n#`X$o#`X$p#`X$q#`X$r#`X$s#`X$t#`X$u#`X$v#`X$w#`X$x#`X$y#`X$z#`X${#`X$|#`X$}#`X%O#`X%P#`X%Q#`X%R#`X%S#`X%T#`X%U#`X%V#`X%W#`X%X#`X%Y#`X%Z#`X%[#`X%]#`X%^#`X%_#`X%`#`X%a#`X%b#`X%c#`X%d#`X%e#`X%f#`X%g#`X%h#`X%i#`X%j#`X%k#`X%l#`X%m#`X%n#`X%o#`X%p#`X%q#`X%r#`X%s#`X%t#`X%u#`X%v#`X%w#`X%x#`X%y#`X%z#`X%|#`X&O#`X&P#`X&R#`X~O%}#`X~P#HYO%}!^i~P##yO#U'UO#r&|O#u&jO#v&lO#w&nO#x&pO#|&xO#}&zO$O'OO$P'QO$Q'SO~O#Xwi#swi#twi#ywi#zwi#{wi#Vwi~P$ xO#Xxi#sxi#txi#yxi#zxi#{xi#Vxi~P$ xO#U'UO#r&|O#|&xO#}&zO$O'OO$P'QO$Q'SO#Xyi#Vyi~P!=RO#U'UO#r&|O#|&xO#}&zO$O'OO$P'QO$Q'SO#Xzi#Vzi~P!>mO#U'UO#r&|O#|&xO#}&zO$O'OO$P'QO$Q'SO#X{i#V{i~P!@XO#U'UO#r&|O#|&xO#}&zO$O'OO$P'QO$Q'SO#X|i#V|i~P!AsO#s&fO#t&hO#X}i#y}i#z}i#{}i#V}i~P$ xO#s&fO#t&hO#y&rO#X!Oi#z!Oi#{!Oi#V!Oi~P$ xO#X!Pi#V!Pi~P#3cO#U'UO#r&|O#|&xO#}&zO$O'OO$P'QO$Q'SO#X!Qi#V!Qi~P!EcO#U'UO#r&|O$O'OO$P'QO$Q'SO#X!Si#V!Si~P!F}O#U'UO#r&|O$Q'SO#X!Ui#V!Ui~P!HiO#U'UO#r&|O$Q'SO#X!Vi#V!Vi~P!JTO#U'UO#r&|O$Q'SO#X!Wi#V!Wi~P!KoO#X#`X#V#`X~P#HYO#X!^i#V!^i~P##yO#R&YO~OX!{OiSO#d!yO#[#hP~O#e$QO#U#`a#r#`a#s#`a#t#`a#u#`a#v#`a#w#`a#x#`a#y#`a#z#`a#{#`a#|#`a#}#`a$O#`a$P#`a$Q#`aX#`ai#`a!X#`a!Y#`a!Z#`a![#`a!c#`a!l#`a#S#`a#i#`a$V#`a$X#`a$Y#`a$Z#`a$[#`a$]#`a$^#`a$_#`a$`#`a$a#`a$b#`a$c#`a$d#`a$e#`a$f#`a$g#`a$h#`a$i#`a$j#`a$k#`a$l#`a$m#`a$n#`a$o#`a$p#`a$q#`a$r#`a$s#`a$t#`a$u#`a$v#`a$w#`a$x#`a$y#`a$z#`a${#`a$|#`a$}#`a%O#`a%P#`a%Q#`a%R#`a%S#`a%T#`a%U#`a%V#`a%W#`a%X#`a%Y#`a%Z#`a%[#`a%]#`a%^#`a%_#`a%`#`a%a#`a%b#`a%c#`a%d#`a%e#`a%f#`a%g#`a%h#`a%i#`a%j#`a%k#`a%l#`a%m#`a%n#`a%o#`a%p#`a%q#`a%r#`a%s#`a%t#`a%u#`a%v#`a%w#`a%x#`a%y#`a%z#`a%|#`a&O#`a&P#`a&R#`a~O%}#`a~P$+PO#X#`a#V#`a~P$+PO#[&^O~O#q&_O#r&aO~P8SO#q&`O#r&bO~P8SOX%lOiSO#d!yO~OX&OOiSO#d!yO~OX!{OiSO#d!yO~O#['YO~O#['ZO~O#['[O~O#[']O~O#R'cO#Y(VO~O#R'dO#Y(WO~O#R'gO~O#R'hO~O#R'iO~O#R'jO~O#X'qO~O#X'rO~O#X'uO~O#X'vO~OX'wO~OX'xO~O#S(]O~O#S(^O~O!Y!lX#P$P![%w![$Q#r#}!c#e!c~",
  goto: "!%h%|PPPPPPPP%}P%}&}'a'a'm%}%}%}(O%})S%}*W+[+hP,P+h+[,T+[,a%},j-j.n.w/Q/Q/Q/Q/Q/Q/Q/Q/Q/Q/Q/Q/Q/Q/Q/Q/Q/QPPPP1V3[5k5k5k5kP5k5k5k5k5k5k7z5kP5k5k8O5k5k3[:_:k:z;Y;`;s;z<QPPPPP<WPP>`PPPPPPPPP>n?T?w@hPPPPPC`PPP%}PPPCfPPPPPPPPPPPPPPPP5kGqIzLcPNxPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP!#X!{iOQRT`y}!h!y#Z#[#`$P$a$d$h%Q%[&U&Y&c&d'Y'Z'[']'^'_'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`Q#OkQ$k#YQ(P(XQ(Q(YQ(T(]R(U(^e!sk!t#Y$V$|$}(X(Y(](^[!xk#Y(X(Y(](^Q$U!tQ${$VR%o$}!SQOQRT`y}#Z#[#`$a$d$h%Q%[&U&Y'y'z'{'|(R(S(_(`b'y!h&c'Y'['^'c'e'g'ie'z!y$P&d'Z']'_'d'f'h'j!SROQRT`y}#Z#[#`$a$d$h%Q%[&U&Y'y'z'{'|(R(S(_(`b'{!h&c'Y'['^'c'e'g'ie'|!y$P&d'Z']'_'d'f'h'j!SoOQRT`y}#Z#[#`$a$d$h%Q%[&U&Y'y'z'{'|(R(S(_(`b'}!h&c'Y'['^'c'e'g'ie(O!y$P&d'Z']'_'d'f'h'je!|ko!U!}#V#W'}(O(X(Y{!zko!U!g!p!}#R#V#W$Q$b&T'T'U'V'W'X'}(O(X(YT!OS!Pe#Rko!U!}#V#W'}(O(X(YQ$h#UQ'^'oR'_'p!{hOQRT`y}!h!y#Z#[#`$P$a$d$h%Q%[&U&Y&c&d'Y'Z'[']'^'_'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`!STOQRT`y}#Z#[#`$a$d$h%Q%[&U&Y'y'z'{'|(R(S(_(`b(_!h&c'Y'['^'c'e'g'ie(`!y$P&d'Z']'_'d'f'h'jQ#`!RQ(R(ZR(S([Q%[$oQ'e'sR'f't%VgOQRTUV`y}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!y#Z#[#`$P$a$d$h%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`%VfOQRTUV`y}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!y#Z#[#`$P$a$d$h%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`%kcOQRTUV`aey}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!n!y#Z#[#`#w#|$P$^$a$d$h$w%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'`'a'b'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`%kbOQRTUV`aey}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!n!y#Z#[#`#w#|$P$^$a$d$h$w%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'`'a'b'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`T!i]!j%kwOQRTUV`aey}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!n!y#Z#[#`#w#|$P$^$a$d$h$w%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'`'a'b'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`Q$w$OQ'`$uQ'a&PR'b%m[!uk#Y(X(Y(](^S$W!u$XR$X!wb!}ko!U#V#W'}(O(X(YR$_!}Q!PSR#^!PS$R!r!{Q$p#qW$z$R$p&W&XQ&W%lR&X&OS$b#R&TR%T$bQ!j]R#x!jQ#|!nR$s#|QjOQ{QQ|RQ!RTQ!l`U#Xy&c&dQ#]}Q#u!hQ$Z!yU$l#Z'Y'ZU$m#['[']Q$o#`Q$x$PQ%S$aQ%V$dU%W$h'^'_U&Q%Q'c'dU&V%['e'fU&[&U'g'hU&]&Y'i'jQ'k'yQ'l'zQ'm'{Q'n'|Q's(RQ't(SQ(Z(_R([(`[!wk#Y(X(Y(](^X$T!t$V$|$}W#Sk!U(X(YQ#UoQ$i#VQ$j#WQ'o'}R'p(Od#Pko!U!}#V#W'}(O(X(YU#r!g'T'UQ$O!pU$e#R$b&TQ$u'VQ%m'XR&P'Wl!{ko!U!}#R#V#W$b&T'V'}(O(X(YS#q!g!pQ$y$QS%l'T'XT&O'U'W%jxOQRTUV`aey}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!n!y#Z#[#`#w#|$P$^$a$d$h$w%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'`'a'b'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`{#Tko!U!g!p!}#R#V#W$Q$b&T'T'U'V'W'X'}(O(X(YQ$c#RR&Z&T!SWOQRT`y}#Z#[#`$a$d$h%Q%[&U&Y'y'z'{'|(R(S(_(`Q!SUU!VV&a&bQ#b!WQ#c!XQ#d!YQ#e!ZQ#f![Q#g!]Q#h!^Q#i!_Q#j!`Q#k!aQ#l!bU#m!c&{&|Q#n!dQ#o!eQ#p!fb#t!h&c'Y'['^'c'e'g'id$[!y$P&d'Z']'_'d'f'h'jQ$q&_Q%P&`Q%^&eQ%_&gQ%`&iQ%a&kQ%b&mQ%c&oQ%d&qQ%e&sQ%f&uQ%g&wQ%h&yQ%i&}Q%j'PQ%k'RQ%p&fQ%q&hQ%r&jQ%s&lQ%t&nQ%u&pQ%v&rQ%w&tQ%x&vQ%y&xQ%z&zQ%{'OQ%|'QR%}'S!veOQRTUV`y}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f#Z#[#`$a$d$h%Q%[&U&Y'y'z'{'|(R(S(_(`!U#w!h&_&a&c&e&g&i&k&m&o&q&s&u&w&y&{&}'P'R'Y'['^'c'e'g'i!X$^!y$P&`&b&d&f&h&j&l&n&p&r&t&v&x&z&|'O'Q'S'Z']'_'d'f'h'j%UfOQRTUV`y}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!y#Z#[#`$P$a$d$h%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`Q!naU!qe#w$^S#{!n#|X%n$w'`'a'b!zdOQRTUV`ey}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f#Z#[#`$a$d$h$w%Q%[&U&Y'y'z'{'|(R(S(_(`W!oa!n#|'`!Y#v!h#w&_&a&c&e&g&i&k&m&o&q&s&u&w&y&{&}'P'R'Y'['^'b'c'e'g'i!]$]!y$P$^&`&b&d&f&h&j&l&n&p&r&t&v&x&z&|'O'Q'S'Z']'_'a'd'f'h'j%kYOQRTUV`aey}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!n!y#Z#[#`#w#|$P$^$a$d$h$w%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'`'a'b'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`%k^OQRTUV`aey}!W!X!Y!Z![!]!^!_!`!a!b!c!d!e!f!h!n!y#Z#[#`#w#|$P$^$a$d$h$w%Q%[&U&Y&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'Y'Z'[']'^'_'`'a'b'c'd'e'f'g'h'i'j'y'z'{'|(R(S(_(`",
  nodeNames: "⚠ StringContent StringEnd IndentedStringContent IndentedStringEnd Comment CommentBlock Expr Lambda Identifier Lambda Formals Formal Formal FormalsRest Lambda Lambda Assert ASSERT With WITH Let LET Attr String StringStart StringInterpolation AttrInterpolation AttrInherit INHERIT AttrInheritFrom IN LetOld If IF THEN ELSE Not Neg Eq NEq LT LE GT GE And Or Imply Update HasAttr Add Sub Mul Div Concat PathLibrary PathAbsolute PathHome PathRelative Call Select Pos Var Primop Int Integer Float TRUE FALSE NULL String IndentedString IndentedStringInterpolation String URI Parens RecSet REC Set List SelectOr OR_KW",
  maxTerm: 233,
  propSources: [nixHighlighting],
  skippedNodes: [0,5,6],
  repeatNodeCount: 7,
  tokenData: "@W~R!SX^$_pq$_qr%Srs%ast%ftu%}vw&Ywx&exy&pyz&uz{&z{|'P|}*P}!O*U!O!P*{!P!Q.y!Q![2O![!]3Y!]!^3_!^!_3d!_!`5e!`!a5r!a!b6P!b!c6U!c!}6Z!}#O<`#P#Q<e#R#S;e#T#o6Z#o#p<j#p#q<o#q#r<z#r#s=T#y#z$_$f$g$_$g#BY7X#BY#BZ>b#BZ$IS7X$IS$I_>b$I_$I|7X$I|$JO>b$JO$JT7X$JT$JU>b$JU$KV7X$KV$KW>b$KW&FU7X&FU&FV>b&FV;'S7X;'S;=`7y<%lO7X~$dY#P~X^$_pq$_#y#z$_$f$g$_#BY#BZ$_$IS$I_$_$I|$JO$_$JT$JU$_$KV$KW$_&FU&FV$_o%XP#qP!_!`%[n%aO#tn~%fOi~~%kST~OY%fZ;'S%f;'S;=`%w<%lO%f~%zP;=`<%l%f~&QP#o#p&T~&YO#d~~&]Pvw&`~&eO#y~~&hPwx&k~&pO%|~~&uO#i~~&zO#j~~'PO$O~~'UW#}~{|'n}!O(]!O!P(]!P!Q(x!Q![(]!c!}(]#R#S(]#T#o(]~'sW$Q~{|(]}!O(]!O!P(]!P!Q(x!Q![(]!c!}(]#R#S(]#T#o(]k(`W{|(]}!O(]!O!P(]!P!Q(x!Q![(]!c!}(]#R#S(]#T#o(]k({V{|)b}!O)b!O!P)b!Q![)b!c!})b#R#S)b#T#o)bk)gW![k{|)b}!O)b!O!P)b!P!Q(x!Q![)b!c!})b#R#S)b#T#o)b~*UO#V~~*ZX#r~{|(]}!O(]!O!P(]!P!Q(x!Q![(]!`!a*v!c!}(]#R#S(]#T#o(]~*{O#{~~+QW#ek{|(]}!O(]!O!P+j!P!Q(x!Q![,t!c!}(]#R#S(]#T#o(]o+mW{|(]}!O(]!O!P,V!P!Q(x!Q![(]!c!}(]#R#S(]#T#o(]o,[W#WS{|(]}!O(]!O!P(]!P!Q(x!Q![(]!c!}(]#R#S(]#T#o(]~,y[%w~{|(]}!O(]!O!P(]!P!Q(x!Q![,t!c!g(]!g!h-o!h!}(]#R#S(]#T#X(]#X#Y-o#Y#o(]~-rW{|(]}!O(]!O!P(]!P!Q(x!Q![.[!c!}(]#R#S(]#T#o(]~.aW%w~{|(]}!O(]!O!P(]!P!Q(x!Q![.[!c!}(]#R#S(]#T#o(]~/OX$P~z{/k{|0r}!O0r!O!P0r!P!Q1y!Q![0r!c!}0r#R#S0r#T#o0r~/nTOz/kz{/}{;'S/k;'S;=`0l<%lO/k~0QVOz/kz{/}{!P/k!P!Q0g!Q;'S/k;'S;=`0l<%lO/k~0lOU~~0oP;=`<%l/k~0wW!Y~{|0r}!O0r!O!P0r!P!Q1a!Q![0r!c!}0r#R#S0r#T#o0r~1dV{|0r}!O0r!O!P0r!Q![0r!c!}0r#R#S0r#T#o0r~2OO#|~~2TW!c~{|(]}!O(]!O!P2m!P!Q(x!Q![2O!c!}(]#R#S(]#T#o(]~2pW{|(]}!O(]!O!P(]!P!Q(x!Q![,t!c!}(]#R#S(]#T#o(]~3_O#R~~3dO#[~~3iW#u~{|4R}!O4R!O!P4R!Q![4R!_!`5`!c!}4R#R#S4R#T#o4R~4UX{|4R}!O4R!O!P4R!P!Q4q!Q![4R!`!a5Z!c!}4R#R#S4R#T#o4R~4tV{|4R}!O4R!O!P4R!Q![4R!c!}4R#R#S4R#T#o4R~5`O!X~~5eO#v~o5jP#fP!_!`5mn5rO#sn~5wP#w~!_!`5z~6PO#x~~6UO#U~~6ZO#Y~~6`]X~wx7X{|8P}!O6Z!O!P(]!P!Q(x!Q![6Z![!]8o!c!}6Z#R#S;e#T#o6Z$g;'S7X;'S;=`7y<%lO7X~7^XX~wx7X}!O7X!Q![7X!c!}7X#R#S7X#T#o7X$g;'S7X;'S;=`7y<%lO7X~7|P;=`<%l7X~8SX{|8P}!O8P!O!P(]!P!Q(x!Q![8P![!]8o!c!}8P#R#S(]#T#o8P~8rdqr:Qtu:Quv:Qvw:Qwx:Qz{:Q{|:Q|}:Q}!O:Q!O!P:Q!P!Q:Q!Q![:Q![!]:Q!_!`:Q!a!b:Q!b!c:Q!c!}:Q#R#S:Q#T#o:Q#r#s:Q~:Vd!l~qr:Qtu:Quv:Qvw:Qwx:Qz{:Q{|:Q|}:Q}!O:Q!O!P:Q!P!Q:Q!Q![:Q![!]:Q!_!`:Q!a!b:Q!b!c:Q!c!}:Q#R#S:Q#T#o:Q#r#s:Q~;j[X~wx7X{|(]}!O;e!O!P(]!P!Q(x!Q![;e!c!};e#R#S;e#T#o;e$g;'S7X;'S;=`7y<%lO7X~<eO&P~~<jO&Q~~<oO#S~~<rP#p#q<u~<zO#z~o=TO#Xe%}W#cQ~=WP!P!Q=Z~=^V{|=s}!O=s!O!P=s!Q![=s!c!}=s#R#S=s#T#o=s~=xW!Z~{|=s}!O=s!O!P=s!P!Q=Z!Q![=s!c!}=s#R#S=s#T#o=s~>iiX~#P~X^$_pq$_wx7X}!O7X!Q![7X!c!}7X#R#S7X#T#o7X#y#z$_$f$g$_$g#BY7X#BY#BZ>b#BZ$IS7X$IS$I_>b$I_$I|7X$I|$JO>b$JO$JT7X$JT$JU>b$JU$KV7X$KV$KW>b$KW&FU7X&FU&FV>b&FV;'S7X;'S;=`7y<%lO7X",
  tokenizers: [string, indentedString, 0, 1, 2, 3, 4],
  topRules: {"Expr":[0,7]},
  specialized: [{term: 9, get: (value) => spec_Identifier[value] || -1}],
  tokenPrec: 7318
});

exports.parser = parser;
